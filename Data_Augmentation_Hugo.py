{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import random\n",
    "from PIL import Image, ImageOps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def augment_image_and_mask(image, mask):\n",
    "    \"\"\"\n",
    "    Apply data augmentation transformations to an image and its corresponding mask.\n",
    "\n",
    "    Parameters:\n",
    "        image (np.ndarray): Original image with shape (height, width, channels).\n",
    "        mask (np.ndarray): Corresponding segmentation mask with shape (height, width).\n",
    "\n",
    "    Returns:\n",
    "        tuple: Augmented image and mask as NumPy arrays.\n",
    "    \"\"\"\n",
    "    # Convert NumPy arrays to PIL Images for augmentation\n",
    "    img = Image.fromarray((image * 255).astype('uint8'))\n",
    "    msk = Image.fromarray(mask.astype('uint8'))\n",
    "    \n",
    "    # Random Flip\n",
    "    if random.random() > 0.5:\n",
    "        img = ImageOps.mirror(img)\n",
    "        msk = ImageOps.mirror(msk)\n",
    "\n",
    "    if random.random() > 0.5:\n",
    "        img = ImageOps.flip(img)\n",
    "        msk = ImageOps.flip(msk)\n",
    "    \n",
    "    # Random Rotation\n",
    "    if random.random() > 0.5:\n",
    "        angle = random.choice([90, 180, 270])\n",
    "        img = img.rotate(angle, resample=Image.BILINEAR)\n",
    "        msk = msk.rotate(angle, resample=Image.NEAREST)\n",
    "\n",
    "    # Random Brightness Adjustment\n",
    "    if random.random() > 0.5:\n",
    "        factor = random.uniform(0.8, 1.2)  # Adjust brightness by 80%-120%\n",
    "        img = ImageOps.autocontrast(img).enhance(factor)\n",
    "\n",
    "    # Convert back to NumPy arrays\n",
    "    augmented_image = np.array(img) / 255.0  # Normalize to [0, 1]\n",
    "    augmented_mask = np.array(msk)\n",
    "\n",
    "    return augmented_image, augmented_mask\n",
    "\n",
    "def augment_dataset(images, masks, num_augmentations=2):\n",
    "    \"\"\"\n",
    "    Generate augmented versions of the dataset.\n",
    "\n",
    "    Parameters:\n",
    "        images (np.ndarray): Array of original images. Shape: (num_images, height, width, channels).\n",
    "        masks (np.ndarray): Array of original masks. Shape: (num_masks, height, width).\n",
    "        num_augmentations (int): Number of augmented copies to create per original image.\n",
    "\n",
    "    Returns:\n",
    "        tuple: Augmented images and masks as NumPy arrays.\n",
    "    \"\"\"\n",
    "    augmented_images = []\n",
    "    augmented_masks = []\n",
    "\n",
    "    for i in range(len(images)):\n",
    "        # Add the original image and mask\n",
    "        augmented_images.append(images[i])\n",
    "        augmented_masks.append(masks[i])\n",
    "        \n",
    "        # Add augmented versions\n",
    "        for _ in range(num_augmentations):\n",
    "            augmented_image, augmented_mask = augment_image_and_mask(images[i], masks[i])\n",
    "            augmented_images.append(augmented_image)\n",
    "            augmented_masks.append(augmented_mask)\n",
    "\n",
    "    return np.array(augmented_images), np.array(augmented_masks)\n",
    "\n",
    "# Example Usage:\n",
    "# Assuming x_train and y_train are the original training images and masks\n",
    "augmented_x_train, augmented_y_train = augment_dataset(x_train, y_train, num_augmentations=2)\n",
    "\n",
    "# Verify the shapes of augmented datasets\n",
    "print(f\"Original training set size: {x_train.shape}\")\n",
    "print(f\"Augmented training set size: {augmented_x_train.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
